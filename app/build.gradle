apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'

def keyStore = file('../gank.keystore')
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    defaultConfig {
        applicationId rootProject.ext.android.applicationId
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
    }

    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'META-INF/rxjava.properties'
    }

    dexOptions {
        incremental false
        javaMaxHeapSize "4g"
    }

    lintOptions {
        disable "InvalidPackage", 'MissingTranslation', 'ExtraTranslation'
        abortOnError false
        lintConfig file("lint.xml")
    }

    signingConfigs {
        debug {

        }

        release {
            storeFile keyStore
            storePassword properties.getProperty('STOREPASS')
            keyAlias properties.getProperty('KEYALIAS')
            keyPassword properties.getProperty('KEYPASS')
        }
    }

    buildTypes {
        debug {
            manifestPlaceholders = [UMENG_APPKEY: properties.getProperty('UMENGAPPKEY')]

        }

        release {
            buildConfigField "boolean", "LOG_DEBUG", "false"

            manifestPlaceholders = [UMENG_APPKEY: properties.getProperty('UMENGAPPKEY')]

            minifyEnabled false
            zipAlignEnabled true
            debuggable false
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release

            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    def outputFile = output.outputFile
                    if (outputFile != null && outputFile.name.endsWith('.apk')) {
                        def fileName = "Gank_v${defaultConfig.versionName}_${variant.productFlavors[0].name}.apk"
                        output.outputFile = new File(outputFile.parent, fileName)
                    }
                }
            }
        }
    }

    productFlavors {
        "Veaer"{}
        "smartisan"{}
        "wandoujia"{}
    }

    productFlavors.all {
        flavor -> flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile rootProject.ext.dependencies["design"]
    compile rootProject.ext.dependencies["appcompat-v7"]
    compile rootProject.ext.dependencies["recyclerview-v7"]
    compile rootProject.ext.dependencies["glide"]
    compile rootProject.ext.dependencies["okhttp"]
    compile rootProject.ext.dependencies["retrofit"]
    compile rootProject.ext.dependencies["rxandroid"]
    compile rootProject.ext.dependencies["butterknife"]
    compile rootProject.ext.dependencies["umeng-analytics"]
}
